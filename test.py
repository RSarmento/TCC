from gensim.models import doc2vecfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.linear_model import LogisticRegression, SGDClassifierfrom sklearn.metrics import accuracy_score, classification_reportfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.svm import SVCfrom sklearn.tree import DecisionTreeClassifierfrom tqdm import tqdmtqdm.pandas(desc="progress-bar")def label_sentences(corpus, label_type):    """    Gensim's Doc2Vec implementation requires each document/paragraph to have a label associated with it.    We do this by using the TaggedDocument method. The format will be "TRAIN_i" or "TEST_i" where "i" is    a dummy index of the post.    """    labeled = []    for i, v in enumerate(corpus):        label = label_type + '_' + str(i)        labeled.append(doc2vec.TaggedDocument(v.split(), [label]))    return labeledclassifiers = [    KNeighborsClassifier(),    DecisionTreeClassifier(class_weight='inbalanced'),    RandomForestClassifier(n_estimators=1000, random_state=0, class_weight='inbalanced'),    LogisticRegression(solver='lbfgs', multi_class='multinomial', class_weight='inbalanced'),    SGDClassifier(max_iter=100, tol=1e-3, class_weight='inbalanced'),    SVC(kernel='linear', class_weight='inbalanced')]from imblearn.under_sampling import RandomUnderSamplerrus = RandomUnderSampler(random_state=0)rus.fit(X_train, y_train)X_resampled, y_resampled = rus.sample(X_train, y_train)print('accuracy %s' % accuracy_score(y_pred, y_test))print(classification_report(y_test, y_pred, target_names=my_tags))